
// OpenAI Service
// This is a simplified implementation using fetch directly
// In a production app, you would use the official OpenAI SDK

// Define the model to use (using the recommended models)
const TEXT_MODEL = "gpt-4o-mini";
const IMAGE_MODEL = "dall-e-3";

// The base URL for OpenAI API
const API_BASE_URL = "https://api.openai.com/v1";

// This would normally be an environment variable, but for demo purposes,
// we're using a placeholder. This should be replaced with a proper API key.
// WARNING: In production, never expose API keys in frontend code.
// Instead, use a backend service or edge function.
const OPENAI_API_KEY = "YOUR_OPENAI_API_KEY"; 

// Check if we have an API key
const hasApiKey = () => {
  return OPENAI_API_KEY !== "YOUR_OPENAI_API_KEY";
};

/**
 * Generate text from OpenAI API
 * @param prompt The text prompt to send to OpenAI
 * @returns The generated text
 */
const generateText = async (prompt: string): Promise<string> => {
  // If no API key, return a mocked response
  if (!hasApiKey()) {
    console.warn("No OpenAI API key provided. Using mock response.");
    // Simulate API latency
    await new Promise(resolve => setTimeout(resolve, 1500));
    return `This is a mocked response for the prompt: "${prompt}". 
    
In a real implementation, this would be generated by OpenAI's ${TEXT_MODEL} model. To use the actual API, you'd need to:
1. Get an API key from OpenAI
2. Set up a server-side endpoint to make the API call (to keep your key secure)
3. Call that endpoint from your frontend

For now, imagine this is some really clever AI-generated content about "${prompt.substring(0, 50)}..."`;
  }

  try {
    const response = await fetch(`${API_BASE_URL}/chat/completions`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${OPENAI_API_KEY}`
      },
      body: JSON.stringify({
        model: TEXT_MODEL,
        messages: [
          { role: "system", content: "You are a helpful content creation assistant. Generate concise, engaging content based on user prompts." },
          { role: "user", content: prompt }
        ],
        max_tokens: 500
      })
    });

    if (!response.ok) {
      const error = await response.json();
      throw new Error(error.error?.message || 'Failed to generate text');
    }

    const data = await response.json();
    return data.choices[0].message.content.trim();
  } catch (error) {
    console.error('Error generating text:', error);
    throw error;
  }
};

/**
 * Generate an image from OpenAI API
 * @param prompt The text prompt to generate an image from
 * @returns The URL of the generated image
 */
const generateImage = async (prompt: string): Promise<string> => {
  // If no API key, return a placeholder image
  if (!hasApiKey()) {
    console.warn("No OpenAI API key provided. Using placeholder image.");
    // Simulate API latency
    await new Promise(resolve => setTimeout(resolve, 2000));
    // Return a placeholder image
    return 'https://placehold.co/600x400/667/fff?text=AI+Generated+Image+Placeholder';
  }

  try {
    const response = await fetch(`${API_BASE_URL}/images/generations`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${OPENAI_API_KEY}`
      },
      body: JSON.stringify({
        model: IMAGE_MODEL,
        prompt: prompt,
        n: 1,
        size: "1024x1024"
      })
    });

    if (!response.ok) {
      const error = await response.json();
      throw new Error(error.error?.message || 'Failed to generate image');
    }

    const data = await response.json();
    return data.data[0].url;
  } catch (error) {
    console.error('Error generating image:', error);
    throw error;
  }
};

export const openai = {
  generateText,
  generateImage
};
